pipeline {
    agent {
        label 'python-terraform-awscli'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '15'))
    }

    environment {
        AWS_DEFAULT_REGION = "eu-west-1"
        CREDENTIALS_ID = "aws-credential-id"
        SCM_CREDENTIAL_ID = "scm-credential-id"
    }

    stages {

        stage('Prepare/Checkout') {

            steps {

                // Delete repo files to clone in a subdirectory instead
                script {
                    sh """
                    pwd
                    ls -la
                    ls -A1 | xargs rm -rf
                    ls -la
                    """
                }

                // Clone project in a subdirectory and not root
                dir('terraform-aws-deploy-foobar') {
                    checkout scm
                }

                // Clone generic terraform ... module
                dir('terraform-aws-module-foobar') {
                    git branch: 'master', url: 'https://sources.xyz/terraform-aws-module-foobar', credentialsId: SCM_CREDENTIAL_ID
                }

                script {
                    sh """
                    pwd
                    ls -la
                    cd terraform-aws-deploy-foobar
                    ls -la
                    """
                }
            }
        }

        stage('Setup variables') {
            steps {
                script {
                    sh """
                    terraform version
                    aws --version
                    python3 --version
                    """
                }
            }
        }

        stage('Install tools') {
            steps {
                script {
                    sh """
                    echo 'Installing pre-commit'
                    pip3 install pre-commit

                    echo 'Installing arkade'
                    curl -sLS https://get.arkade.dev | sh
                    export PATH="$PATH:$HOME/.arkade/bin"
                    arkade get kubectl
                    arkade get helm

                    echo 'Installing terraform-docs for pre-commit checks'
                    curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-`uname`-amd64.tar.gz
                    tar -xzf terraform-docs.tar.gz
                    chmod +x terraform-docs
                    mv terraform-docs /usr/local/bin/terraform-docs

                    echo 'Installing tfsec'
                    curl -Lo ./tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.15.2/tfsec-linux-amd64
                    chmod +x ./tfsec
                    mv ./tfsec /usr/local/bin/tfsec

                    kubectl version
                    helm version
                    terraform-docs version
                    tfsec -v

                    cd terraform-aws-deploy-foobar
                    pre-commit install-hooks
                    """
                }
            }
        }

        stage('pre-commit check') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') { // Continue if pre-commit fails
                    sh """
                    pwd
                    cd terraform-aws-deploy-foobar
                    pre-commit run --all-files
                    """
                }
            }
        }

        stage('Terraform plan env1') {
            steps {
                withAWS(...) {

                    sh 'aws sts get-caller-identity'

                    withEnv(["ENV=env", "TF_VAR_foobar=barfoo"]) {
                        sh """
                        cd terraform-aws-deploy-foobar
                        terraform init -input=false -reconfigure -backend-config ./${ENV}.terraform.conf -var-file ./${ENV}.terraform.tfvars
                        terraform plan -input=false -var-file ./${ENV}.terraform.tfvars -out=./terraform.tfplan
                        """
                    }
                }
            }
        }

        stage('Terraform apply env1') {
            steps {
                withAWS(...) {
                    sh """
                    aws sts get-caller-identity
                    terraform apply -input=false ./terraform.tfplan
                    """
                }
            }
        }
    }
}
