#### Setup

#set -o errexit
#set -o pipefail
#set -o nounset
# set -o xtrace
# set -o verbose

ZPLUG_DIR=/zsh/zplug
ANTIGEN_DIR=/zsh/antigen
DOTFILES_DIR=
ENV_FILE=/.env.sh
OS=$(uname -s)

setopt autocd # If only a directory is entered, cd there
setopt no_beep
setopt hist_ignore_dups
setopt long_list_jobs
setopt mark_dirs # Add "/" if completes directory
setopt autopushd

# Completion system
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'	# Case insensitive auto-completion
zstyle ':completion:*' menu select=2

# Load dotfiles location

if [ -z "$DOTFILES_DIR" ];
then
	stat /dotfiles > /dev/null 2>&1;
	if [ $? -ne 0 ];
	then
		export DOTFILES_DIR=~/dotfiles;
	else
		export DOTFILES_DIR=/dotfiles;
	fi;
fi;

# Source env file variables

if ls ${DOTFILES_DIR}${ENV_FILE} > /dev/null 2> /dev/null;
then
	source ${DOTFILES_DIR}${ENV_FILE}
fi;

# Source 42 specific dotfiles
if [ $(hostname | grep -E 'e[1-9]{1,2}r[1-9]{1,2}p[1-9]{1,2}.42.fr') ] && [ -f ~/42_dotfiles ];
then
	source ~/.brewconfig
	source ~/42_dotfiles/.zshrc
fi;

# Auto-update dotfiles if new commits found

if [ -n "$DOTFILES_DIR" ];
then
	DOTFILES_BRANCH=$(git -C $DOTFILES_DIR name-rev --name-only HEAD)

	git -C $DOTFILES_DIR fetch origin $DOTFILES_BRANCH > /dev/null 2>&1
	git -C $DOTFILES_DIR diff --exit-code master...origin/$DOTFILES_BRANCH > /dev/null 2>&1
	if [ $? != 0 ];
	then
		echo "\e[32mRemote has new commits ! Updating ...\e[39m"
		git -C $DOTFILES_DIR merge origin/$DOTFILES_BRANCH
	fi;
fi;

#### Zsh plugins ####

if [ -n "$DOTFILES_DIR" ];
then
	if command -v awk > /dev/null && ! [ $(hostname | grep -E 'e[1-9]{1,2}r[1-9]{1,2}p[1-9]{1,2}.42.fr') ];

	then
		export ZPLUG_HOME=${DOTFILES_DIR}${ZPLUG_DIR}/.zplug

		if ! [ -d ${ZPLUG_HOME} ];
		then
			git clone https://github.com/zplug/zplug ${ZPLUG_HOME}
		fi;

		source ${ZPLUG_HOME}/init.zsh
		zplug 'zplug/zplug', \
			hook-build:'zplug --self-manage'

		zplug "mafredri/zsh-async", \
			from:github, \
			depth:1
		zplug "sindresorhus/pure", \
			use:pure.zsh, \
			from:github, \
			as:theme, \
			depth:1

		zplug "zsh-users/zsh-autosuggestions", \
			from:github, \
			depth:1
		zplug "zsh-users/zsh-completions", \
			from:github, \
			depth:1
		zplug "zdharma-continuum/fast-syntax-highlighting", \
			from:github, \
			depth:1

		# zplug "plugins/asdf", \
		# 	from:oh-my-zsh

		zplug "ahmetb/kubectl-aliases", \
			use:.kubectl_aliases
		zplug "plugins/aws", \
			from:oh-my-zsh
		zplug "djui/alias-tips", \
			from:github

		zplug "rupa/z", \
			from:github, \
			use:"z.sh", \
			depth:1

		zplug "b4b4r07/enhancd", \
			from:github, \
			use:"init.sh", \
			depth:1

		zplug "raylee/tldr", \
			from:github, \
			as:command, \
			use:"tldr", \
			depth:1

		zplug "junegunn/fzf-bin", \
			from:gh-r, \
			as:command, \
			rename-to:fzf, \
			use:"*$(echo ${OS} | tr '[:upper:]' '[:lower:]')*amd64*"
		zplug "junegunn/fzf", \
			use:"shell/*.zsh", \
			defer:2
		zplug "junegunn/fzf", \
			use:"bin/fzf-tmux", \
			as:command, \
			defer:2

		zplug "Tarrasch/zsh-autoenv"

		zplug "paulirish/git-open", \
			as:plugin

		# zplug "sharkdp/bat",\
		# 	as:command, \
		# 	from:gh-r, \
		# 	rename-to:bat

		if [ "${OS}" = "Linux" ];
		then
			;
		elif [ "${OS}" = "Darwin" ];
		then
			;
		fi;

		if ! zplug check --verbose;
		then
			echo;
			zplug install || true;
		fi;

		zplug load
	else
		if ! [ -f ${DOTFILES_DIR}${ANTIGEN_DIR}/antigen.zsh ];
		then
			git clone https://github.com/zsh-users/antigen ${DOTFILES_DIR}${ANTIGEN_DIR}
			git -C $DOTFILES_DIR$ANTIGEN_DIR checkout develop
		fi;
		git -C $DOTFILES_DIR$ANTIGEN_DIR fetch origin develop 2> /dev/null
		git -C $DOTFILES_DIR$ANTIGEN_DIR diff --exit-code origin/develop
		if [ $? != 0 ];
		then
			echo "\e[32mUpdating antigen...\e[39m"
			git -C $DOTFILES_DIR$ANTIGEN_DIR merge origin/develop
		fi;

		source $DOTFILES_DIR$ANTIGEN_DIR/antigen.zsh

		# Pure theme
		antigen bundle mafredri/zsh-async
		antigen bundle sindresorhus/pure

		# Additional features
		antigen bundle zsh-users/zsh-autosuggestions
		antigen bundle zsh-users/zsh-completions
		antigen bundle zdharma/fast-syntax-highlighting

		#antigen bundle sobolevn/wakatime-zsh-plugin

		# Additional commands
		antigen bundle eendroroy/zed-zsh

		antigen apply
	fi;
fi;

#### asdf ####

export ASDF_CONFIG_FILE="${DOTFILES_DIR}/asdf/asdfrc"
export ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=".tool-versions"
export ASDF_DIR="$HOME/.asdf"
export ASDF_DATA_DIR="$HOME/.asdf"

function asdf_init_global_plugins() {
	cp ${DOTFILES_DIR}/asdf/tool-versions $HOME/.tool-versions
	asdf plugin add aws-iam-authenticator
	asdf plugin add awscli
	asdf plugin add arkade
	asdf plugin add bat
	asdf plugin add buildpack
	asdf plugin add container-diff
	asdf plugin add eksctl
	asdf plugin add hadolint
	asdf plugin add helm
	asdf plugin add krew
	asdf plugin add k9s
	asdf plugin add kubectl
	asdf plugin add neovim
	asdf plugin add nodejs
	asdf plugin add packer
	asdf plugin add pre-commit
	asdf plugin add python
	asdf plugin add scaleway-cli
	asdf plugin add terraform
	asdf plugin add tmux
	asdf plugin add yarn

	if [ "$(arch)" != "arm64" ];
	then
		asdf plugin add delta
		asdf plugin add jq
		asdf plugin add skaffold
		asdf plugin add yq
	fi

	asdf install
}

if ! [ -d ${ASDF_DIR} ];
then
	git clone https://github.com/asdf-vm/asdf.git ${ASDF_DIR}
	git -C ${ASDF_DIR} checkout "$(git -C ${ASDF_DIR} describe --abbrev=0 --tags)"
	. $HOME/.asdf/asdf.sh
	asdf_init_global_plugins
fi;
. $HOME/.asdf/asdf.sh

# append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)

#### Git config ####

# Global git-template to auto-install pre-commit
if command -v pre-commit > /dev/null && [ "$(git config --global init.templateDir)" != "$(eval echo '~/.git-template')" ];
then
	git config --global init.templateDir ~/.git-template
	pre-commit init-templatedir ~/.git-template
fi;

# Global gitignore
git config --global core.excludesfile ${DOTFILES_DIR}/git/.gitignore

# Custom 'change-commits' alias -> see https://stackoverflow.com/questions/2919878/git-rewrite-previous-commit-usernames-and-emails
git config --global alias.change-commits '!'"f() { VAR=\$1; OLD=\$2; NEW=\$3; shift 3; git filter-branch --env-filter \"if [[ \\\"\$\`echo \$VAR\`\\\" = '\$OLD' ]]; then export \$VAR='\$NEW'; fi\" \$@; }; f "

if [ "${OS}" = "Linux" ];
then
	git config --global credential.helper cache;
elif [ "${OS}" = "Darwin" ];
then
	git config --global credential.helper osxkeychain;
fi;

#### Aliases and exports ####

preexec_functions=()

function expand_aliases {
  input_command=$1
  expanded_command=$2
  if [ $input_command != $expanded_command ] && alias | grep $1 > /dev/null 2>&1; then
    echo "\t'$1' -> '$expanded_command'"
  fi
}

preexec_functions+=expand_aliases

# Add dotfiles/bin to path
export PATH="$PATH:$DOTFILES_DIR/bin"

#export WAKATIME_HOME=$DOTFILES_DIR/zsh/.wakatime.cfg
export SERVERLESS_PLATFORM_VENDOR=aws

alias glog="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"
alias psc="ps xawf -eo pid,user,cgroup,args"
alias vcat="/bin/cat"
alias l='ls -laG'
alias kcn='kubectl config set-context --current --namespace'
alias kruncurl='kubectl run -it --restart=Never --rm --image=appropriate/curl curl --'
alias aws_sts_export_assume_role.sh="source ${DOTFILES_DIR}/scripts/aws_sts_export_assume_role.sh"
alias aws_clear_env.sh="source ${DOTFILES_DIR}/scripts/aws_clear_env.sh"
alias aws_ec2_describe_instances_table='aws ec2 describe-instances  --query '"\"Reservations[*].Instances[*].{name: Tags[?Key=='Name'] | [0].Value, instance_id: InstanceId, ip_address: PrivateIpAddress, state: State.Name}\""' --output table'
alias aws_create_dev_c9_environment='aws cloud9 create-environment-ec2 --name DEV_UL_TOOLS-CLOUD9 --description "Temporary environment" --instance-type t2.medium --subnet-id subnet-2c730249 --owner-arn arn:aws:iam::883029375205:user/joffrey.janiec.ext@veolia.com'

if [ "$(uname -s)" = "Linux" ];
then
	;
elif [ "$(uname -s)" = "Darwin" ];
then
	;
fi;

export AWS_DEFAULT_REGION='eu-west-1'

export GPG_TTY=$(tty)

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Enable bat preview for fzf
export FZF_DEFAULT_OPTS="--ansi --preview-window 'right:50%' --color=dark --border --preview \"fzf_preview.sh {}\""

# Enable coloration in less
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r

# Use fzf or fzy w/ enchancd
export ENHANCD_FILTER=fzf:fzy

#### Load completions

# Kubectl
command -v kubectl > /dev/null 2>&1 && source <(kubectl completion zsh)

#### Scripts ####

# Export templates path
export TEMPLATES_PATH="${DOTFILES_DIR}/templates"

# Add local dotfiles scripts to path
export PATH="$PATH:$DOTFILES_DIR/scripts"

# Source aws-cli auto-completion script
if command -v aws_zsh_completer.sh > /dev/null 2>&1;
then
	source aws_zsh_completer.sh
fi;

# Enable pyenv if present
if command -v pyenv > /dev/null 2>&1;
then
	eval "$(pyenv init -)"
	eval "$(pipenv --completion)"
fi;

# Clone repo and cd into it
clone_repo() {
	GIT_DEST_DIR="${HOME}"

	echo "${1}" | grep -q 'git@' 2> /dev/null

	if [ $? -eq 1 ];
	then
		# http url
		src=$(echo ${1} | cut -d '/' -f 3- | rev | cut -d '/' -f 2- | rev);
	else
		# ssh
		src=$(echo ${1} | cut -d '@' -f 2- | tr ':' '/' | rev | cut -d '/' -f 2- | rev)
	fi;
	project=$(echo ${1} | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1)

	mkdir -p "${GIT_DEST_DIR}/${src}"
	git -C ${GIT_DEST_DIR}/${src} clone ${1}
	cd ${GIT_DEST_DIR}/${src}/${project}
}

terraform-docs-0.12-docker() {
	docker run --rm \
		-v $PWD:/data \
		cytopia/terraform-docs \
	terraform-docs-012 md .
}

aws_ssm_start_session() {
	TABLE=$(aws_ec2_describe_instances_table | grep running);
	for i in $@;
	do
		TABLE=$(echo ${TABLE} | grep -i $i);
	done;
  TABLE=$(echo ${TABLE} | head -n 1)
	echo "[*] Starting session on instance $(echo ${TABLE} | cut -d '|' -f4 | tr -d ' ') / $(echo ${TABLE} | cut -d '|' -f3 | tr -d ' ') / $(echo ${TABLE} | cut -d '|' -f2 | tr -d ' ')"
	aws ssm start-session --target $(echo ${TABLE} | cut -d '|' -f2 | tr -d ' ')
}

command -v skbn
if [ $? -ne 0 ];
then
skbn() {
  docker run \
    --rm \
    -it \
    -v $HOME/.aws:'$HOME/.aws'
}
fi;

# Set git user.email / user.name

git_switch_profile.sh > /dev/null

# Set GOPATH & update PATH if go is installed

if command -v go > /dev/null 2>&1;
then
	export GOPATH=$(go env GOPATH)
	export PATH="$PATH:$GOPATH/bin"
fi

# Set krew plugins path in $PATH

if [ -d "$HOME/.krew" ];
then
  export PATH="$PATH:${KREW_ROOT:-$HOME/.krew}/bin"
elif [ "$(asdf list krew 2>/dev/null)" != "0" ]
then
  export PATH="$PATH:$(asdf where krew)/bin"
fi
