### Setup

# set -o errexit
# set -o pipefail
# set -o nounset
# set -o xtrace
# set -o verbose

ZPLUG_DIR=/zsh/zplug
ANTIGEN_DIR=/zsh/antigen
export DOTFILES_DIR=$HOME/dotfiles
ENV_FILE=$HOME/.env.sh
OS=$(uname -s)

setopt autocd # If only a directory is entered, cd there
setopt no_beep
setopt hist_ignore_dups
setopt long_list_jobs
setopt mark_dirs # Add "/" if completes directory
setopt autopushd

# Completion system
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line # Bash-like command-and-edit readline for zle

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'	# Case insensitive auto-completion
zstyle ':completion:*' menu select=2

# Load dotfiles location

if [ -z "$DOTFILES_DIR" ];
then
	stat /dotfiles > /dev/null 2>&1;
	if [ $? -ne 0 ];
	then
		export DOTFILES_DIR=~/dotfiles;
	else
		export DOTFILES_DIR=/dotfiles;
	fi;
fi;

# Source env file variables

if ls ${ENV_FILE} > /dev/null 2> /dev/null;
then
	source ${ENV_FILE}
fi;

#### Zsh plugins ####

if [ -n "$DOTFILES_DIR" ];
then
	export ZPLUG_HOME=${DOTFILES_DIR}${ZPLUG_DIR}/.zplug

	if ! [ -d ${ZPLUG_HOME} ];
	then
		git clone https://github.com/zplug/zplug ${ZPLUG_HOME}
	fi;

	source ${ZPLUG_HOME}/init.zsh


	zplug 'zplug/zplug', \
		hook-build:'zplug --self-manage'

	# Theme
	zplug "mafredri/zsh-async", from:"github", use:"async.zsh"
	zplug "sindresorhus/pure", \
		use:pure.zsh, \
		from:github, \
		as:theme, \
		depth:1

	# ZSH wide completions
	zplug "zsh-users/zsh-autosuggestions", \
		from:github, \
		depth:1
	zplug "zsh-users/zsh-completions", \
		from:github, \
		depth:1
	# zplug "Myzel394/zsh-copilot", \
	# 	from:github, \
	# 	use:"zsh-copilot.plugin.zsh", \
	# 	depth:1, \
	# 	as:command DOES NOT WORK
	zplug "zdharma-continuum/fast-syntax-highlighting", \
		from:github, \
		depth:1

	# Package manager
	zplug "plugins/asdf", \
		from:oh-my-zsh

	# Daily tools additional completions
	zplug "ahmetb/kubectl-aliases", \
		use:.kubectl_aliases
	zplug "plugins/aws", \
		from:oh-my-zsh
	zplug "plugins/helm", \
		from:oh-my-zsh
	zplug "plugins/gitfast", \
		from:oh-my-zsh
	zplug "plugins/kubectl", \
		from:oh-my-zsh
	zplug "plugins/npm", \
		from:oh-my-zsh
	zplug "plugins/pip", \
		from:oh-my-zsh
	# zplug "plugins/sudo", \
	# 	from:oh-my-zsh
	zplug "plugins/ssh", \
		from:oh-my-zsh

	# Faster cd
	zplug "rupa/z", \
		from:github, \
		use:"z.sh", \
		depth:1
	zplug "b4b4r07/enhancd", \
		from:github, \
		use:"init.sh", \
		depth:1

	# Utils
	# zplug "junegunn/fzf-bin", \
	# 	from:gh-r, \
	# 	as:command, \
	# 	rename-to:fzf, \
	# 	use:"*$(echo ${OS} | tr '[:upper:]' '[:lower:]')*amd64*"
	zplug "junegunn/fzf", \
		use:"shell/*.zsh", \
		defer:2
	zplug "junegunn/fzf", \
		use:"bin/fzf-tmux", \
		as:command, \
		defer:2

	zplug "paulirish/git-open", \
		as:plugin

	# zplug "sharkdp/bat",\
	# 	as:command, \
	# 	from:gh-r, \
	# 	rename-to:bat

	# OS specific plugins
	# if [ "${OS}" = "Linux" ];
	# then
	# 	;
	# elif [ "${OS}" = "Darwin" ];
	# then
	# 	;
	# fi;

	if ! zplug check --verbose;
	then
		echo;
		zplug install || true;
	fi;

	zplug load
fi;

#### asdf ####

export ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=".tool-versions"
export ASDF_DIR="$HOME/.asdf"
export ASDF_DATA_DIR="$HOME/.asdf"

function asdf_init_global_plugins() {
	cp ${DOTFILES_DIR}/asdf/tool-versions $HOME/.tool-versions
	asdf plugin add aws-iam-authenticator
	asdf plugin add awscli
	asdf plugin add bat
	asdf plugin add buildpack
	asdf plugin add container-diff
	asdf plugin add cilium-cli
	asdf plugin add delta
	asdf plugin add dyff
	asdf plugin add eksctl
	asdf plugin add hadolint
	asdf plugin add helm
	asdf plugin add krew
	asdf plugin add k9s
	asdf plugin add kubectl
	asdf plugin add kubeconform
	asdf plugin add neovim
	asdf plugin add nodejs
	asdf plugin add packer
	asdf plugin add pre-commit
	asdf plugin add python
	asdf plugin add scaleway-cli
	asdf plugin add shellcheck
	asdf plugin add skaffold
	asdf plugin add terraform
	asdf plugin add tmux
	asdf plugin add yarn

	if [ "$(arch)" != "arm64" ];
	then
		asdf plugin add delta
		asdf plugin add jq
		asdf plugin add skaffold
		asdf plugin add yq
	fi

	asdf install
}

if ! [ -d ${ASDF_DIR} ];
then
	git clone https://github.com/asdf-vm/asdf.git ${ASDF_DIR}
	git -C ${ASDF_DIR} checkout "$(git -C ${ASDF_DIR} describe --abbrev=0 --tags)"
	. $HOME/.asdf/asdf.sh
	asdf_init_global_plugins
fi;
. $HOME/.asdf/asdf.sh

#### Git config ####

# Global git-template to auto-install pre-commit
if command -v pre-commit > /dev/null && [ "$(git config --global init.templateDir)" != "$(eval echo '~/.git-template')" ];
then
	git config --global init.templateDir ~/.git-template
	pre-commit init-templatedir ~/.git-template
fi;

# Global gitignore
git config --global core.excludesfile ${DOTFILES_DIR}/git/.gitignore

# Custom 'change-commits' alias -> see https://stackoverflow.com/questions/2919878/git-rewrite-previous-commit-usernames-and-emails
git config --global alias.change-commits '!'"f() { VAR=\$1; OLD=\$2; NEW=\$3; shift 3; git filter-branch --env-filter \"if [[ \\\"\$\`echo \$VAR\`\\\" = '\$OLD' ]]; then export \$VAR='\$NEW'; fi\" \$@; }; f "

if [ "${OS}" = "Linux" ];
then
	git config --global credential.helper cache;
elif [ "${OS}" = "Darwin" ];
then
	git config --global credential.helper osxkeychain;
fi;

#### Aliases and exports ####

export EDITOR="nano"

preexec_functions=()

function expand_aliases {
  input_command=$1
  expanded_command=$2
  if [ $input_command != $expanded_command ] && alias | grep $1 > /dev/null 2>&1; then
    echo "\t'$1' -> '$expanded_command'"
  fi
}

preexec_functions+=expand_aliases

# Add dotfiles/bin to path
export PATH="$PATH:$DOTFILES_DIR/bin"

# Add additional directories to path
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.apigeecli/bin"
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

## Krew plugins
  if [ -d "$HOME/.krew" ];
  then
    export PATH="$PATH:${KREW_ROOT:-$HOME/.krew}/bin"
  elif [ "$(asdf list krew 2>/dev/null)" != "0" ]
  then
    export PATH="$PATH:$(asdf where krew)/bin"
  fi

alias glog="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"
alias gs="git status"
alias gd="git diff"
alias gds="git diff --staged"
alias gb="git branch"
alias gc="git checkout"
alias gcb="git checkout -b"
alias gp="git push"
alias gpull="git pull"
alias ga="git add"
alias gau="git add -u"
#alias gcm="git commit -S -m"
function gcm {
  git commit -S -m "${@}"
}
alias grs="git restore --staged"

alias psc="ps xawf -eo pid,user,cgroup,args"
alias vcat="/bin/cat"
alias l='ls -laG'
alias kcn='kubectl config set-context --current --namespace'
alias kruncurl='kubectl run -it --restart=Never --rm --image=appropriate/curl curl --'
alias aws_sts_export_assume_role.sh="source ${DOTFILES_DIR}/scripts/aws_sts_export_assume_role.sh"
alias aws_clear_env.sh="source ${DOTFILES_DIR}/scripts/aws_clear_env.sh"
alias aws_ec2_describe_instances_table='aws ec2 describe-instances  --query '"\"Reservations[*].Instances[*].{name: Tags[?Key=='Name'] | [0].Value, instance_id: InstanceId, ip_address: PrivateIpAddress, state: State.Name}\""' --output table'
alias commitgpt="npx commitgpt"

# if [ "$(uname -s)" = "Linux" ];
# then
# 	;
# elif [ "$(uname -s)" = "Darwin" ];
# then
# 	;
# fi;

export AWS_DEFAULT_REGION='eu-west-1'

export GPG_TTY=$(tty)

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Enable bat preview for fzf
export FZF_DEFAULT_OPTS="--ansi --preview-window 'top:50%' --color=dark --border --preview \"fzf_preview.sh {}\""

# Enable coloration in less
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r

# Use fzf or fzy w/ enchancd
export ENHANCD_FILTER=fzf:fzy

#### Load completions

# # Kubectl
# command -v kubectl > /dev/null 2>&1 && source <(kubectl completion zsh)

#### Additional Key bindings

bindkey '^R' history-incremental-search-backward
bindkey ';2D' backward-word
bindkey '[D' backward-word
bindkey ';2C' forward-word
bindkey '[C' forward-word
bindkey ';2A' beginning-of-line
bindkey '[A' beginning-of-line
bindkey ';2B' end-of-line
bindkey '[B' end-of-line

#### Scripts ####

# Export templates path
export TEMPLATES_PATH="${HOME}/dotfiles/templates"

# Add local dotfiles scripts to path
export SCRIPTS_PATH="${HOME}/dotfiles/scripts:${HOME}/env"
export PATH="${PATH}:${SCRIPTS_PATH}"

# Source aws-cli auto-completion script
# if command -v aws_zsh_completer.sh > /dev/null 2>&1;
# then
# 	source aws_zsh_completer.sh
# fi;

# Enable pyenv if present
# if command -v pyenv > /dev/null 2>&1;
# then
# 	eval "$(pyenv init -)"
# 	eval "$(pipenv --completion)"
# fi;

# Clone repo and cd into it
clone_repo() {
	GIT_DEST_DIR="${HOME}"

	echo "${1}" | grep -q 'git@' 2> /dev/null

	if [ $? -eq 1 ];
	then
		# http url
		src=$(echo ${1} | cut -d '/' -f 3- | rev | cut -d '/' -f 2- | rev);
	else
		# ssh
		src=$(echo ${1} | cut -d '@' -f 2- | tr ':' '/' | rev | cut -d '/' -f 2- | rev)
	fi;
	project=$(echo ${1} | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1)

	mkdir -p "${GIT_DEST_DIR}/${src}"
	git -C ${GIT_DEST_DIR}/${src} clone ${1}
	cd ${GIT_DEST_DIR}/${src}/${project}
}

aws_ssm_start_session() {
	TABLE=$(aws_ec2_describe_instances_table | grep running);
	for i in $@;
	do
		TABLE=$(echo ${TABLE} | grep -i $i);
	done;
  TABLE=$(echo ${TABLE} | head -n 1)
	echo "[*] Starting session on instance $(echo ${TABLE} | cut -d '|' -f4 | tr -d ' ') / $(echo ${TABLE} | cut -d '|' -f3 | tr -d ' ') / $(echo ${TABLE} | cut -d '|' -f2 | tr -d ' ')"
	aws ssm start-session --target $(echo ${TABLE} | cut -d '|' -f2 | tr -d ' ')
}

# command -v skbn > /dev/null 2>&1
# if [ $? -ne 0 ];
# then
# skbn() {
#   docker run \
#     --rm \
#     -it \
#     -v $HOME/.aws:'$HOME/.aws'
# }
# fi;

# Set git user.email / user.name

# git_switch_profile.sh > /dev/null

# Set GOPATH & update PATH if go is installed

# if command -v go > /dev/null 2>&1;
# then
# 	export GOPATH=$(go env GOPATH)
# 	export PATH="$PATH:$GOPATH/bin"
# fi

if [ -d "$HOME/.zsh-copilot" ];
then
  source ~/.zsh-copilot/zsh-copilot.plugin.zsh 2>/dev/null
fi
